// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskVacancy.Models;

#nullable disable

namespace TaskVacancy.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.4.23259.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskVacancy.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 0f,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 0f,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Balance = 0f,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("TaskVacancy.Models.AccountTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<float>("After")
                        .HasColumnType("real");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<float>("Before")
                        .HasColumnType("real");

                    b.Property<string>("Commnet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountTransactions");
                });

            modelBuilder.Entity("TaskVacancy.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsIdentified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Dushanbe",
                            Birthday = new DateTime(1998, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "najibullokenjaev@gmail.com",
                            FirstName = "Najibulllo",
                            IsIdentified = true,
                            LastName = "Kenjaev",
                            Phone = "937479909"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Dushanbe",
                            Birthday = new DateTime(1996, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ishanqulov@gmail.com",
                            FirstName = "Muhammad",
                            IsIdentified = false,
                            LastName = "Ishanqulov",
                            Phone = "900900900"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Dushanbe",
                            Birthday = new DateTime(1998, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "shodiev@gmail.com",
                            FirstName = "Aziz",
                            IsIdentified = false,
                            LastName = "shodiev",
                            Phone = "918282868"
                        });
                });

            modelBuilder.Entity("TaskVacancy.Models.Account", b =>
                {
                    b.HasOne("TaskVacancy.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskVacancy.Models.AccountTransactions", b =>
                {
                    b.HasOne("TaskVacancy.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
